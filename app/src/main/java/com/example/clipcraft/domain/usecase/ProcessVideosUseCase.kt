package com.example.clipcraft.domain.usecase

import android.util.Log
import com.example.clipcraft.data.remote.ApiMapper
import com.example.clipcraft.data.remote.ClipCraftApiService
import com.example.clipcraft.models.*
import com.example.clipcraft.services.*
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flow
import javax.inject.Inject
import kotlinx.coroutines.withContext
import kotlinx.coroutines.Dispatchers

class ProcessVideosUseCase @Inject constructor(
    private val videoAnalyzer: VideoAnalyzerService,
    private val transcriptionService: TranscriptionService,
    private val videoEditor: VideoEditorService,
    private val apiService: ClipCraftApiService
) {
    private val TAG = "ProcessVideosUseCase"

    suspend operator fun invoke(
        selectedVideos: List<SelectedVideo>,
        userCommand: String,
        exportSettings: ExportSettings = ExportSettings(),
        editingState: EditingState = EditingState(),
        videoAnalysesMap: Map<String, VideoAnalysis>? = null
    ): Flow<ProcessingState> = flow {

        try {
            val currentVideoAnalyses = mutableListOf<VideoAnalysis>()
            val currentVideoMap = mutableMapOf<String, SelectedVideo>()

            if (editingState.mode == ProcessingMode.EDIT && videoAnalysesMap != null) {
                // –í —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑
                emit(ProcessingState.ProgressUpdate("üîÑ –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"))
                Log.d(TAG, "–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ.")
                selectedVideos.forEach { video ->
                    val analysis = videoAnalysesMap[video.fileName]
                    if (analysis != null) {
                        currentVideoAnalyses.add(analysis)
                        currentVideoMap[video.fileName] = video
                    } else {
                        Log.e(TAG, "–û—à–∏–±–∫–∞: –ê–Ω–∞–ª–∏–∑ –¥–ª—è –≤–∏–¥–µ–æ '${video.fileName}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                        emit(ProcessingState.Error("–ê–Ω–∞–ª–∏–∑ –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω."))
                        return@flow
                    }
                }
            } else {
                // –î–ª—è –Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ –∏–ª–∏ –µ—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                emit(ProcessingState.ProgressUpdate("üìπ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–µ–æ..."))
                Log.d(TAG, "–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ. –†–µ–∂–∏–º: ${editingState.mode}")

                selectedVideos.forEachIndexed { index, video ->
                    emit(ProcessingState.ProgressUpdate("üé¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ ${index + 1} –∏–∑ ${selectedVideos.size}"))
                    Log.d(TAG, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ ${index + 1}/${selectedVideos.size}: fileName='${video.fileName}', path='${video.path}'")

                    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–µ–æ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Å—Ü–µ–Ω
                    var analysis = videoAnalyzer.analyzeVideoWithScenes(video)
                    emit(ProcessingState.ProgressUpdate("‚úÖ –í–∏–¥–µ–æ ${index + 1} –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ"))
                    Log.d(TAG, "–ê–Ω–∞–ª–∏–∑ —Å—Ü–µ–Ω –¥–ª—è ${video.fileName} –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ ${analysis.scenes.size} —Å—Ü–µ–Ω.")

                    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞—É–¥–∏–æ, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
                    if (video.hasAudio) {
                        Log.d(TAG, "–ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –¥–ª—è ${video.fileName}...")

                        val transcription = transcriptionService.transcribeVideo(video.uri) { msg ->
                            Log.d(TAG, "–ü—Ä–æ–≥—Ä–µ—Å—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è ${video.fileName}: $msg")
                        }

                        if (transcription.isNotEmpty()) {
                            // –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                            val fullText = transcription.joinToString(" ") { it.text }
                            val truncatedText = if (fullText.length > 100) {
                                fullText.take(97) + "..."
                            } else {
                                fullText
                            }

                            emit(ProcessingState.ProgressUpdate("üí¨ –í –≤–∏–¥–µ–æ ${index + 1} –Ω–∞–π–¥–µ–Ω–∞ —Ä–µ—á—å: \"$truncatedText\""))
                            Log.d(TAG, "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–æ ${transcription.size} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è ${video.fileName}")

                            // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∫ –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω–µ
                            val updatedScenes = analysis.scenes.map { scene ->
                                val sceneTranscription = transcription.filter { segment ->
                                    segment.start >= scene.startTime && segment.end <= scene.endTime
                                }
                                scene.copy(transcription = sceneTranscription)
                            }
                            analysis = analysis.copy(scenes = updatedScenes)
                            Log.d(TAG, "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ —Å—Ü–µ–Ω–∞–º ${video.fileName}.")
                        } else {
                            // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Ä–µ—á—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞
                            Log.d(TAG, "–ù–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è ${video.fileName} (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –≥–æ–ª–æ—Å–∞ –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞).")
                        }
                    } else {
                        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç –∑–≤—É–∫–∞
                        Log.d(TAG, "–í–∏–¥–µ–æ ${video.fileName} –±–µ–∑ –∑–≤—É–∫–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é.")
                    }

                    currentVideoAnalyses.add(analysis)
                    currentVideoMap[video.fileName] = video

                    Log.d(TAG, "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ currentVideoMap: key='${video.fileName}' -> video.uri=${video.uri}")
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å—Ü–µ–Ω–∞ —Å –∫–∞–¥—Ä–æ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            val hasValidScenes = currentVideoAnalyses.any {
                it.scenes.any { scene -> !scene.frameBase64.isNullOrEmpty() }
            }

            if (!hasValidScenes) {
                emit(ProcessingState.Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–∞–¥—Ä—ã –∏–∑ –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"))
                Log.e(TAG, "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–∞–¥—Ä—ã –∏–∑ –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Ä–≤–µ—Ä–æ–º.")
                return@flow
            }
            emit(ProcessingState.ProgressUpdate("üìä –í—Å–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤—ã –∫ –º–æ–Ω—Ç–∞–∂—É"))
            Log.d(TAG, "–í—Å–µ –≤–∏–¥–µ–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä ClipCraft.")

            // 2. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä ClipCraft
            emit(ProcessingState.ProgressUpdate("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç..."))
            Log.d(TAG, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ ClipCraft...")

            try {
                performHealthCheck()
                emit(ProcessingState.ProgressUpdate("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω"))
            } catch (e: Exception) {
                Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ ClipCraft", e)
                emit(ProcessingState.Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É."))
                return@flow
            }

            val apiRequest = ApiMapper.toApiRequest(
                userCommand = userCommand,
                videoAnalyses = currentVideoAnalyses,
                editingState = editingState
            )
            Log.d(TAG, "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∑–∞–ø—Ä–æ—Å –∫ ClipCraft API. UserCommand: '$userCommand', –í–∏–¥–µ–æ: ${currentVideoAnalyses.size}, –†–µ–∂–∏–º: ${editingState.mode}")

            emit(ProcessingState.ProgressUpdate("ü§ñ –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –º–æ–Ω—Ç–∞–∂–∞..."))
            val apiResponse = apiService.analyzeVideos(apiRequest)
            emit(ProcessingState.ProgressUpdate("üìã –ü–ª–∞–Ω –º–æ–Ω—Ç–∞–∂–∞ –≥–æ—Ç–æ–≤!"))
            Log.d(TAG, "–û—Ç–≤–µ—Ç –æ—Ç ClipCraft API –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ.")

            val editPlan = ApiMapper.fromApiResponse(apiResponse)

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–ª–∞–Ω–∞ –º–æ–Ω—Ç–∞–∂–∞
            val planSummary = "–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –≤–∏–¥–µ–æ –∏–∑ ${editPlan.finalEdit.size} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤"
            emit(ProcessingState.ProgressUpdate("üìù $planSummary"))

            // –ï—Å–ª–∏ –µ—Å—Ç—å notes –≤ –ø–ª–∞–Ω–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
            editPlan.finalEdit.forEach { segment ->
                segment.notes?.let { notes ->
                    if (notes.isNotBlank()) {
                        emit(ProcessingState.ProgressUpdate("üí≠ $notes"))
                    }
                }
            }

            Log.d(TAG, "–ü–ª–∞–Ω –º–æ–Ω—Ç–∞–∂–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –≤ –ø–ª–∞–Ω–µ: ${editPlan.finalEdit.size}.")

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–Ω –º–æ–Ω—Ç–∞–∂–∞
            if (editPlan.finalEdit.isEmpty()) {
                emit(ProcessingState.Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –º–æ–Ω—Ç–∞–∂–∞"))
                Log.e(TAG, "–û—à–∏–±–∫–∞: –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –ø–ª–∞–Ω –º–æ–Ω—Ç–∞–∂–∞.")
                return@flow
            }

            // 3. –ú–æ–Ω—Ç–∞–∂ –≤–∏–¥–µ–æ –ª–æ–∫–∞–ª—å–Ω–æ
            emit(ProcessingState.ProgressUpdate("üé¨ –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω—Ç–∞–∂ –≤–∏–¥–µ–æ..."))
            Log.d(TAG, "–ù–∞—á–∞–ª–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω—Ç–∞–∂–∞ –≤–∏–¥–µ–æ.")

            val outputPath = videoEditor.executeEditPlan(
                editPlan = editPlan,
                videoMap = currentVideoMap,
                exportSettings = exportSettings,
                onProgress = { progress ->
                    val percentInt = (progress * 100).toInt()
                    Log.d(TAG, "–ü—Ä–æ–≥—Ä–µ—Å—Å –º–æ–Ω—Ç–∞–∂–∞: $percentInt%")
                    // –ù–µ –º–æ–∂–µ–º –≤—ã–∑–≤–∞—Ç—å emit –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ suspend —Ñ—É–Ω–∫—Ü–∏—è
                    // –ü—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å—Å—è, –Ω–æ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ UI
                }
            )
            emit(ProcessingState.ProgressUpdate("üéâ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!"))
            Log.d(TAG, "–õ–æ–∫–∞–ª—å–Ω—ã–π –º–æ–Ω—Ç–∞–∂ –≤–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω. –í—ã—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å: $outputPath")

            // 4. –£—Å–ø–µ—Ö
            // –í–∞–∂–Ω–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            val videoAnalysesMap = currentVideoAnalyses.associateBy { it.fileName }
            emit(ProcessingState.Success(outputPath, editPlan, videoAnalysesMap))
            Log.d(TAG, "–ü—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç: $outputPath")

        } catch (e: retrofit2.HttpException) {
            val errorMessage = when (e.code()) {
                500 -> "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                404 -> "–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
                400 -> "–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏."
                else -> "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${e.code()}"
            }
            Log.e(TAG, "HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: –ö–æ–¥ ${e.code()}, –°–æ–æ–±—â–µ–Ω–∏–µ: ${e.message()}", e)
            emit(ProcessingState.Error(errorMessage))
        } catch (e: java.net.UnknownHostException) {
            Log.e(TAG, "–û—à–∏–±–∫–∞: –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Ö–æ—Å—Ç ClipCraft API.", e)
            emit(ProcessingState.Error("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É"))
        } catch (e: java.net.SocketTimeoutException) {
            Log.e(TAG, "–û—à–∏–±–∫–∞: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ ClipCraft API.", e)
            emit(ProcessingState.Error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ"))
        } catch (e: Exception) {
            val errorMessage = e.message ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
            Log.e(TAG, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: $errorMessage", e)
            emit(ProcessingState.Error(errorMessage))
        }
    }

    private suspend fun performHealthCheck() {
        val health = withContext(Dispatchers.IO) { apiService.checkHealth() }
        if (health.status != "healthy") {
            Log.e(TAG, "–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä ClipCraft –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –°—Ç–∞—Ç—É—Å - ${health.status}")
            throw Exception("–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°—Ç–∞—Ç—É—Å: ${health.status}")
        }
        Log.d(TAG, "–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä ClipCraft –¥–æ—Å—Ç—É–ø–µ–Ω. –°—Ç–∞—Ç—É—Å: ${health.status}")
    }
}