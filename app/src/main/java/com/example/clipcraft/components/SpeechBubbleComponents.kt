package com.example.clipcraft.ui.components

import androidx.compose.animation.*
import androidx.compose.animation.core.*
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.lazy.rememberLazyListState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

data class SpeechBubbleMessage(
    val id: String = java.util.UUID.randomUUID().toString(),
    val text: String,
    val type: MessageType = MessageType.SYSTEM,
    val timestamp: Long = System.currentTimeMillis(),
    val action: (() -> Unit)? = null
)

enum class MessageType {
    SYSTEM,        // –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ—á—å, –∫–æ–º–ø–æ–∑–∏—Ü–∏—é)
    TRANSCRIPTION, // –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ—á—å
    PLAN,          // –ü–ª–∞–Ω –º–æ–Ω—Ç–∞–∂–∞
    TIP,           // –°–æ–≤–µ—Ç—ã
    PROGRESS,      // –°–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    SUCCESS,       // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    FEEDBACK       // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
}

@Composable
fun SpeechBubbleChat(
    messages: List<SpeechBubbleMessage>,
    modifier: Modifier = Modifier
) {
    val listState = rememberLazyListState()
    val coroutineScope = rememberCoroutineScope()

    // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    LaunchedEffect(messages.size) {
        if (messages.isNotEmpty()) {
            coroutineScope.launch {
                delay(100) // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—é
                listState.animateScrollToItem(messages.size - 1)
            }
        }
    }

    LazyColumn(
        state = listState,
        modifier = modifier,
        contentPadding = PaddingValues(16.dp),
        verticalArrangement = Arrangement.spacedBy(8.dp),
        reverseLayout = false // –°–æ–æ–±—â–µ–Ω–∏—è –∏–¥—É—Ç —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
    ) {
        items(
            items = messages,
            key = { it.id }
        ) { message ->
            AnimatedVisibility(
                visible = true,
                enter = fadeIn(
                    animationSpec = tween(300, easing = EaseOutCubic)
                ) + slideInVertically(
                    initialOffsetY = { it / 2 },
                    animationSpec = tween(300, easing = EaseOutCubic)
                )
            ) {
                SpeechBubble(message = message)
            }
        }
    }
}

@Composable
fun SpeechBubble(
    message: SpeechBubbleMessage
) {
    val backgroundColor = when (message.type) {
        MessageType.SYSTEM -> MaterialTheme.colorScheme.secondaryContainer
        MessageType.TRANSCRIPTION -> MaterialTheme.colorScheme.primaryContainer
        MessageType.PLAN -> MaterialTheme.colorScheme.tertiaryContainer
        MessageType.TIP -> MaterialTheme.colorScheme.surfaceVariant
        MessageType.PROGRESS -> MaterialTheme.colorScheme.secondaryContainer
        MessageType.SUCCESS -> MaterialTheme.colorScheme.primaryContainer
        MessageType.FEEDBACK -> MaterialTheme.colorScheme.tertiaryContainer
    }

    val contentColor = when (message.type) {
        MessageType.SYSTEM -> MaterialTheme.colorScheme.onSecondaryContainer
        MessageType.TRANSCRIPTION -> MaterialTheme.colorScheme.onPrimaryContainer
        MessageType.PLAN -> MaterialTheme.colorScheme.onTertiaryContainer
        MessageType.TIP -> MaterialTheme.colorScheme.onSurfaceVariant
        MessageType.PROGRESS -> MaterialTheme.colorScheme.onSecondaryContainer
        MessageType.SUCCESS -> MaterialTheme.colorScheme.onPrimaryContainer
        MessageType.FEEDBACK -> MaterialTheme.colorScheme.onTertiaryContainer
    }

    Row(
        modifier = Modifier.fillMaxWidth(),
        horizontalArrangement = when (message.type) {
            MessageType.TRANSCRIPTION -> Arrangement.End
            else -> Arrangement.Start
        }
    ) {
        Box(
            modifier = Modifier
                .widthIn(max = 280.dp)
                .clip(
                    RoundedCornerShape(
                        topStart = 16.dp,
                        topEnd = 16.dp,
                        bottomStart = if (message.type == MessageType.TRANSCRIPTION) 16.dp else 4.dp,
                        bottomEnd = if (message.type == MessageType.TRANSCRIPTION) 4.dp else 16.dp
                    )
                )
                .background(backgroundColor)
                .padding(12.dp)
        ) {
            Column(
                modifier = Modifier.fillMaxWidth()
            ) {
                // –ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
                if (message.type != MessageType.TRANSCRIPTION) {
                    Text(
                        text = "ClipCraft",
                        fontSize = 11.sp,
                        fontWeight = FontWeight.Medium,
                        color = contentColor.copy(alpha = 0.7f),
                        modifier = Modifier.padding(bottom = 4.dp)
                    )
                }

                // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
                Text(
                    text = message.text,
                    color = contentColor,
                    style = MaterialTheme.typography.bodyMedium,
                    fontSize = if (message.type == MessageType.TIP) 13.sp else 14.sp
                )
                
                // –ö–Ω–æ–ø–∫–∞ –¥–ª—è feedback —Å–æ–æ–±—â–µ–Ω–∏–π
                if (message.type == MessageType.FEEDBACK && message.action != null) {
                    Spacer(modifier = Modifier.height(8.dp))
                    Button(
                        onClick = message.action,
                        modifier = Modifier.fillMaxWidth(),
                        contentPadding = PaddingValues(horizontal = 16.dp, vertical = 8.dp),
                        colors = ButtonDefaults.buttonColors(
                            containerColor = MaterialTheme.colorScheme.primary
                        )
                    ) {
                        Text(
                            text = "–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É",
                            style = MaterialTheme.typography.labelMedium
                        )
                    }
                }

                // –í—Ä–µ–º—è –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É
                Text(
                    text = SimpleDateFormat("HH:mm", Locale.getDefault()).format(Date(message.timestamp)),
                    fontSize = 10.sp,
                    color = contentColor.copy(alpha = 0.5f),
                    modifier = Modifier
                        .align(Alignment.End)
                        .padding(top = 4.dp)
                )
            }
        }
    }
}

// –§—Ä–∞–∑—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞—É–∑
fun getRandomProgressMessage(): String {
    val messages = listOf(
        "‚ú® –ï—â—ë —á—É—Ç—å-—á—É—Ç—å...",
        "üé¨ –ï—â—ë –ø–∞—Ä—É —à—Ç—Ä–∏—Ö–æ–≤...",
        "üé® –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–∑–∏—Ü–∏—é...",
        "‚ö° –†–∞–±–æ—Ç–∞ –∫–∏–ø–∏—Ç!",
        "üéØ –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ...",
        "üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞–≥–∏—é –º–æ–Ω—Ç–∞–∂–∞...",
        "üé™ –¢–≤–æ—Ä–∏–º —á—É–¥–µ—Å–∞...",
        "üöÄ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–¥—Ä—ã...",
        "üé≠ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —à—Ç—Ä–∏—Ö–∏...",
        "üåü –ü–æ–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...",
        "üéµ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã...",
        "üìΩÔ∏è –°–∫–ª–µ–∏–≤–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã...",
        "üñºÔ∏è –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ...",
        "üí´ –í—Å—ë –∏–¥—ë—Ç –ø–æ –ø–ª–∞–Ω—É!",
        "üéâ –£–∂–µ —Å–∫–æ—Ä–æ —É–≤–∏–¥–∏—à—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
    )
    return messages.random()
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Å–æ–≤–µ—Ç–æ–≤
fun getRandomTip(): String {
    val tips = listOf(
        "üí° –°–æ–≤–µ—Ç: –°–Ω–∏–º–∞–π—Ç–µ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞",
        "üí° –°–æ–≤–µ—Ç: –î–µ—Ä–∂–∏—Ç–µ –∫–∞–º–µ—Ä—É —Å—Ç–∞–±–∏–ª—å–Ω–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à—Ç–∞—Ç–∏–≤",
        "üí° –°–æ–≤–µ—Ç: –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –º–æ–Ω—Ç–∞–∂–∞",
        "üí° –°–æ–≤–µ—Ç: –ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ –¥–µ–ª–∞–π—Ç–µ –ø–∞—É–∑—ã –º–µ–∂–¥—É —Ñ—Ä–∞–∑–∞–º–∏",
        "üí° –°–æ–≤–µ—Ç: –û—Å—Ç–∞–≤–ª—è–π—Ç–µ 2-3 —Å–µ–∫—É–Ω–¥—ã –¥–æ –∏ –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è",
        "üí° –°–æ–≤–µ—Ç: –°–Ω–∏–º–∞–π—Ç–µ –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è Reels",
        "üí° –°–æ–≤–µ—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–æ —Ç—Ä–µ—Ç–µ–π –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏",
        "üí° –°–æ–≤–µ—Ç: –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Å–Ω–∏–º–∞—Ç—å –Ω–∞ —É—Ä–æ–≤–Ω–µ –≥–ª–∞–∑",
        "üí° –°–æ–≤–µ—Ç: –ò–∑–±–µ–≥–∞–π—Ç–µ —Å—ä—ë–º–∫–∏ –ø—Ä–æ—Ç–∏–≤ —Å–≤–µ—Ç–∞",
        "üí° –°–æ–≤–µ—Ç: –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ñ–æ–∫—É—Å –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∑–∞–ø–∏—Å–∏"
    )
    return tips.random()
}